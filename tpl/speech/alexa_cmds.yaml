>
  {# Alexa Cmds #}
  {%- macro getReport() -%}
    {{ [
      'Okay.', 
      'If you insist.',
      'I am afraid I can not do that <break time="1s"/> I am kidding,',
      'Leave it to me.',
      'As you wish.',
      'I am on it.',
      'No Problem.',
      'I think I can handle that.',
      'Working on it now.',
      '<break time="2s"/> Oh, you were talking to me. Let me take care of that.'
      'Why not. It is not like I ever sleep.',
      'I am not even supposed to be here today. But whatever.',
      'You did not say the magic word. <break time="1s"/> Oh forget it. I will take care of it.',
      'Funny, I was just about to do that.',
      'There are still terabytes of calculations required before I can.<break time="1s"/> Oh, whatever.'
      ] | random }}

    {% set ns=namespace(speak = "") %}
    {% set ns.speak = states.input_select.speak_list.state %}
    {% set dy = {'opening': ('closed','open'),'window':('closed','open'),
      'door': ('closed','open'),'garage_door':('closed','open'),
      'lock':('locked','unlocked'),'presence':('home','away'),
      'connectivity':('connected','not connected'),
      'vibration':('detected','clear'),'problem':('not',''),
      'smoke':('detected','clear'),'sound':('detected','clear'),
      'motion':('detected','clear'),'battery':('on','off'),
      'occupancy':('detected','clear') } %} 
    {% set word = ns.speak.split() %}
    {% for ps in word %}
      {% set tn = ps[ps.find("("):ps.find(")")+1] %}
      {% set rp = "" %}
      {% if tn|count > 0 %}
        {% set rp = tn %}
        {% if tn == "(gr)" %}
          {% set gr = ['Morning','Afternoon','Evening'] %}
          {% set rp = gr[(now().hour/12)|int + (now().hour > 17)]%}
        {% elif tn == "(tt)" %}
          {% set rp = now().strftime("%-I %M %p") %}
        {% elif tn == "(td)" %}
          {% set rp = now().strftime("%A the %dth of %B %Y") %}
        {% elif tn|regex_search('\(c[0-9][0-9]\)') %}
          {% set rp = "" %}
        {% else %}
          {% set et = state_attr("input_select.entity_list","options") %}
          {% set et = et[tn[2:4]|int] %}
          {% if tn|regex_search('\(e..f\)') %}
            {% set rp = state_attr(et,"friendly_name")|replace('_', '  ') %}
          {% elif tn|regex_search('\(e..[s$S]\)') %}
            {% if tn[4:5] == "S" %}
              {% set st = states(et)|float(0)|round(1)|string %}
              {% set st = st ~ " " ~ state_attr(et,"unit_of_measurement")|replace('None','') %}
            {% endif %}
            {% if tn[4:5] == "$" %}
              {% set st = states(et) %}
            {% endif %}
            {% if tn[4:5] == "s" %}
              {% set st = states[et].state_with_unit %}
            {% endif %}
            {% set dt = state_attr(et,"device_class")|string %}
            {% if (dt != "None") and (st =='off' or st == 'on')  %} 
              {% set st = dy[dt][st|int] %}
            {% endif %}
            {% set rp = st %} 
          {% elif tn|regex_search('\(e..[bB]\)') %}
            {% set br = state_attr(et,"brightness")|int %}
            {% set rp = br|string %} 
            {% if tn[4:5] == 'b' %}
              {% set rp = ((100*br/254)|int)|string %}
            {% endif %}
          {% elif tn|regex_search('\(e..[0-9]\)') %}
            {% set al = states[et]['attributes']|list %}
            {% set rp = state_attr(et,al[tn[4:5]|int])|string %}
          {% endif %}
        {% endif %}
      {%endif %}
      {% set ns.speak = ns.speak.replace(tn,rp) %}
    {% endfor %}
    {{ns.speak}}
      
  {%- endmacro -%}

  {# a macro that removes all newline characters, empty spaces, and returns formatted text  #}
  {%- macro cleanup(data) -%}
    {%- for item in data.split("\n")  if item | trim != "" -%}
      {{ item | trim }} {% endfor -%}
  {%- endmacro -%}

  {# a macro to call all macros :)  #}
  {%- macro mother_of_all_macros() -%}
    {{ getReport() }}
  {%- endmacro -%}

  {# Call the macro  #}
  {{- cleanup(mother_of_all_macros()) -}}