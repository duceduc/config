#  [D4:D4:DA:5D:EC:4C]
# AQI [see japan] https://en.wikipedia.org/wiki/Air_quality_index

substitutions:
  name: sniffer0
#  upper: Sniffer0

packages:
  stats: !include components/stats.yaml
  bme680: !include components/bme680.yaml

<<: !include .base.yaml #.168

esphome:
  name: $name
esp32:
  board: featheresp32 # need this chipset CP2104 

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

# Grab font from https://fonts.google.com/specimen/Roboto and place in same directory as this file
font:
  - file: "components/fonts/Roboto-Medium.ttf"
    id: sz_24
    size: 24
  - file: "components/fonts/Roboto-Medium.ttf"
    id: sz_20
    size: 20
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/³µΩ'
  - file: "components/fonts/Roboto-Medium.ttf"
    id: sz_13
    size: 13

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
      ignore_strapping_warning: true
    name: Button S1
    id: button0
    on_press:
      then:
        - switch.toggle: backlight

  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: Button S2
    id: button1
    on_press:
      then:
        - switch.toggle: backlight

switch:
  - platform: gpio
    name: Backlight
    pin: 
      number: GPIO4
      allow_other_uses: true
    id: backlight
    restore_mode: ALWAYS_ON

time:
  - platform: homeassistant
    id: esptime
    timezone: Asia/Tokyo

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    backlight_pin:
      number: GPIO4
      allow_other_uses: true
    cs_pin: #GPIO5
      number: GPIO5
      ignore_strapping_warning: true
    dc_pin: GPIO16
    reset_pin: GPIO23
    update_interval: 1s
    rotation: 270
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 19, it.get_width(), it.get_height(), id(my_blue));   // header bar

      it.strftime(4,  3, id(sz_13), id(my_yellow), TextAlign::TOP_LEFT, "%Y-%m-%d %H:%M:%S", id(esptime).now());

      if (id(system_status).state) {
        it.print(236, 3, id(sz_13), id(my_green), TextAlign::TOP_RIGHT, "${name} Online");
      } else {
        it.print(236, 3, id(sz_13), id(my_red), TextAlign::TOP_RIGHT, "${name} Offline");
      }

      int r = 18;

      it.print(4,    r, id(sz_24), id(my_gray),   TextAlign::TOP_LEFT,  "PM2.5:");

      auto color = id(my_red);
      if (id(pm_2_5_aqi).state < 50) color = id(my_green);
      else if (id(pm_2_5_aqi).state < 100) color = id(my_yellow);
      it.printf(236, r, id(sz_24), color, TextAlign::TOP_RIGHT, "%0.0f AQI", id(pm_2_5_aqi).state);

      r += 21;
      it.print(4,    r, id(sz_20), id(my_gray),   TextAlign::TOP_LEFT,  "PM:");
      it.printf(236, r, id(sz_20), id(my_yellow), TextAlign::TOP_RIGHT, "%0.0f/%0.0f/%0.0f µg/m³", id(pm_1_0).state, id(pm_2_5).state, id(pm_10).state);

      r += 25;
      it.print(120,    r, id(sz_24), id(my_gray),   TextAlign::TOP_CENTER,  "Environment");

      r += 23;
      float temp_f = id(temp).state;
      float temp2_f = id(temp).state * (9.0/5.0) + 32.0;
      /*it.printf(4,   r, id(sz_20), id(my_yellow), TextAlign::TOP_LEFT, "%0.1f°F", id(temp).state); */
      it.printf(4,   r, id(sz_20), id(my_yellow), TextAlign::TOP_LEFT, "%0.1f°F", temp2_f);
      it.printf(125, r, id(sz_24), id(my_yellow), TextAlign::TOP_CENTER, "%0.1f°C", temp_f);
      it.printf(236, r, id(sz_20), id(my_yellow), TextAlign::TOP_RIGHT,  "%0.1f%%", id(humidity).state);

      r += 21;
      it.printf(4,   r, id(sz_20), id(my_yellow), TextAlign::TOP_LEFT,  "%0.1f hPa", id(pressure).state);
      it.printf(236, r, id(sz_20), id(my_yellow), TextAlign::TOP_RIGHT, "%0.1f kΩ",  id(gas_resistance).state/1000.0);


# Particulate matter configuration entry
uart:
  rx_pin: GPIO27
  baud_rate: 9600

# For temp + humidity sensor
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

sensor:
  - platform: pmsx003
    type: PMSX003
    id: pmsa003

    pm_1_0:
      id: pm_1_0
      name: PM <1.0 µm
      filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 10

    pm_2_5:
      id: pm_2_5
      name: PM <2.5 µm
      filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 10
      on_value:
        lambda: |-
          // https://en.wikipedia.org/wiki/Air_quality_index#Computing_the_AQI
          if (id(pm_2_5).state < 12.0) {
            // good
            id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (12.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
          } else if (id(pm_2_5).state < 35.4) {
            // moderate
            id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 12.1) * (id(pm_2_5).state - 12.1) + 51.0);
          } else if (id(pm_2_5).state < 55.4) {
            // usg
            id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
          } else if (id(pm_2_5).state < 150.4) {
            // unhealthy
            id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (150.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
          } else if (id(pm_2_5).state < 250.4) {
            // very unhealthy
            id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (250.4 - 150.5) * (id(pm_2_5).state - 150.5) + 201.0);
          } else if (id(pm_2_5).state < 350.4) {
            // hazardous
            id(pm_2_5_aqi).publish_state((400.0 - 301.0) / (350.4 - 250.5) * (id(pm_2_5).state - 250.5) + 301.0);
          } else if (id(pm_2_5).state < 500.4) {
            // hazardous 2
            id(pm_2_5_aqi).publish_state((500.0 - 401.0) / (500.4 - 350.5) * (id(pm_2_5).state - 350.5) + 401.0);
          }

    pm_10_0:
      id: pm_10
      name: PM <10.0 µm
      filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 10

  - platform: template
    name: PM <2.5 AQI
    unit_of_measurement: "AQI"
    icon: "mdi:air-filter"
    accuracy_decimals: 0
    id: pm_2_5_aqi

