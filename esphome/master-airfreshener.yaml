#  [ ]

substitutions:
  name: master-airfreshener

  temp_offset: "0"
  hum_offset: "0"
  # Timing Intervals: Adjust to suit your Need/Situation.
  # NOTE: Values MUST BE in "quotes"
  interval1: "5"
  interval2: "15"
  interval3: "30"
  interval4: "60"
  interval5: "120"
  # Plunger Pulse Duration. Range: 55-100, 3v at 210
  squirt_pulse: "140ms"
  # Cannister Squirt Capacity
  maxSquirts: "300" #max 280

#packages:
#  ld2410: !include components/ld2410-v2.yaml
#  aht10: !include components/aht10.yaml

<<: !include .base.yaml

i2c: # for aht10
  sda: GPIO6 #D4
  scl: GPIO7 #D5
  scan: true

uart: # for ld2410
  id: uart_1
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

esphome:
  name: $name
  platformio_options:
    board_build.flash_mode: dio
esp32:
  board: seeed_xiao_esp32c3
  variant: esp32c3
  framework:
    type: esp-idf

globals:
  # Store the Cannister Percentage
  - id: squirts
    type: float
    restore_value: yes

  # Timer for Hold Button Reset
  - id: press_duration
    type: int
    restore_value: no
    initial_value: '0'

button:
  - platform: template
    name: Alt Button
    icon: mdi:restart
    on_press:
      then:
        - lambda: |-
            ESP_LOGD("Scent-a-Tron", "Can Percentage RESET");
            id(squirts) = 0;
            id(can_level).publish_state(100);
            global_preferences->sync();

binary_sensor: # not working for small glade
  # Unit's Top Button for local Manual "Squirts" and Resetting Cannister Percentage
  - platform: gpio
    name: Button
    disabled_by_default: true
    pin:
      number: GPIO9 # GPIO9 partial working
      inverted: True
    on_press:
      then:
        - lambda: |-
            id(press_duration) = millis();
    on_release:
      then:
        - lambda: |-
            if (millis() - id(press_duration) < 3000) {
            ESP_LOGD("Scent-a-Tron", "The Button Was Pressed!");
            id(theSquirter).turn_on();
            } else {
            ESP_LOGD("Scent-a-Tron", "Can Percentage RESET");
            id(squirts) = 0;
            id(can_level).publish_state(100);
            global_preferences->sync();
            }
  - platform: status
    name: status

select:
  # Drop-Down Menu, "Select" in Home Assistant for Interval Automation
  - platform: template
    id: intervalSelect
    name: Interval
    icon: mdi:timer-outline
    optimistic: true
    restore_value: true
    options:
      - "Off"
      - $interval1 Minutes
      - $interval2 Minutes
      - $interval3 Minutes
      - $interval4 Minutes
      - $interval5 Minutes
    on_value:
      then:
        - script.execute: squirtTimer

script:
  # Script for Auto squirt
  - id: squirtTimer
    mode: restart
    then:
      - while:
          condition:
            lambda: 'return id(intervalSelect).state != "Off";'
          then:
            - delay: !lambda 'return atoi(id(intervalSelect).state.c_str()) * 60000;' # For testing. Default 60000
            # Fire off a Squirt
            - switch.turn_on: theSquirter

switch:
  # The Glade DC Motor
  - platform: gpio
    name: ' '
    id: theSquirter
    icon: mdi:spray
    pin:
      number: GPIO10  #D10 confirm to work
    on_turn_on:
      then:
        - delay: $squirt_pulse
        - switch.turn_off: theSquirter
        - lambda: |-
            id(squirts) += 1;
            id(can_level).publish_state( (($maxSquirts-id(squirts))/$maxSquirts) * 100 );
            ESP_LOGD("Scent-a-Tron", "I Squirted!");
            global_preferences->sync();

sensor:
  - platform: wifi_signal
    name: wifi signal
    update_interval: 15s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15

  # Cannister Percentage
  - platform: template
    id: can_level
    name: Can
    device_class: volume
    unit_of_measurement: "Can"
    update_interval: $interval1 min
    lambda: |-
      return (($maxSquirts-id(squirts))/$maxSquirts) * 100;
