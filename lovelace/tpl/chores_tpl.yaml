# lovelace_gen
# background: '+variables.var.color+'; 

{% set entity = 'sensor.'+sensor_name %}

      type: 'custom:button-card'
      entity: {{ entity }}
      name: {{ name }}
      icon: {{ icon }}
      label: >
        [[[ return variables.var.label ]]]
      show_label: true
      custom_fields:
        status: >
          [[[ return '<span style="display: inline-block; font-size: 14px;  padding: 0 6px; margin-right: 4px; float: right; border-radius: 5px;">'+variables.var.days_left+'</span>' ]]]
      styles:
        grid:
          - grid-template-areas: '"i n status" "i l status"'
          - grid-template-columns: 14% 1fr 1fr
          - grid-template-rows: 1fr 1fr
        icon:
          - color: >
              [[[ return variables.var.color ]]]
        label:
          - justify-self: start
          - font-size: 13px
          - opacity: 0.6
          - color: var(--secondary-text-color)          
        name: 
          - justify-self: start
          - font-size: 14px
      variables:
        var: >
          [[[
            let colors = {};
            colors["success"] = "#8BC24A";
            colors["warning"] = "#FFC107";
            colors["error"] = "#FF5252";
            colors["disabled"] = "var(--secondary-text-color)";
            
            let result = {};
            result.label = "Create Task";
            result.color = colors["disabled"];
            result.icon = "mdi:alert-plus";
            result.days_left = "";
            let date;
            let seconds;
            let timestamp;
            let time;
            let minutes;
            let hours;
            let days;
            
            if (states['{{ entity }}']) {
              if (entity.state != 'unknown') {
                date = entity.state;
                seconds = new Date(date);
                timestamp = (seconds.getTime()) / 1000;
                time = (Date.now() / 1000) - timestamp;
                minutes = Math.floor(((time % 3600) / 60));
                hours = Math.floor(((time % 86400) / 3600));
                days = Math.floor((time / 86400));
                
                result.color = colors["success"];
                result.icon = "{{ icon }}";

                // LAST TRIGGER
                if (time < 60)
                  result.label = 'less than 1 minute';
                else if (days == 1)
                  result.label = '1 day ago';
                else if (days > 1)
                  result.label = days+' days ago';
                else if (hours >= 1)
                  result.label = hours+' hours ago';
                else if (hours < 1)
                  result.label = minutes+(minutes > 1 ? ' Minutes ago' : ' Minute ago');
                
                // DAYS LEFT
                result.days_left = Math.round(((timestamp + ({{cycle_days|int}}*86400)) - (Date.now()/1000)) / 86400);
                if (result.days_left <= {{warning_before|int}}) {
                  result.color = colors["warning"];
                  //result.icon = "mdi:clock-alert";
                }
                if (result.days_left <= 0) {
                  result.color = colors["error"];
                  //result.icon = "mdi:clock-alert";
                }
                result.days_left = result.days_left + (result.days_left <= 1 ? " Day" : " Days");

              } else {
                result.label = "Click to initiate";
              }
            }
            return result;
            
          ]]]
      tap_action:
        confirmation:
          text: >
            [[[
              if (!states['{{ entity }}'])
                return 'Entity {{ entity }} is created.'
              else
                return 'Are you sure you want to mark {{ name }} as done?'
            ]]]
        action: call-service
        service: mqtt.publish
        service_data:
          topic: >
            [[[
              if (!states['{{ entity }}'])
                return 'homeassistant/sensor/{{ sensor_name }}/config'
              else
                return 'homeassistant/sensor/{{ sensor_name }}/state'
            ]]]
          payload: >
            [[[
              var timestamp = Date.now();
              var time = new Date(timestamp).toISOString();
              if (!states['{{entity}}'])
                return '{ "name": "{{ name }}", "state_topic": "homeassistant/sensor/{{ sensor_name }}/state", "value_template": "\{\{ value_json.state \}\}", "device_class": "timestamp", "json_attributes_topic": "homeassistant/sensor/{{ sensor_name }}/state", "json_attributes_template": "\{\{ value_json.attributes | tojson \}\}" }'
              else
                return '{ "state":"' + time + '", "attributes": { "cycle_days": {{ cycle_days }}, "warning_before": {{ warning_before }} } }'
            ]]]
          retain: true