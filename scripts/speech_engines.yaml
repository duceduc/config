#########################################################
#                                                                                                              
#             Speech Engines                                                                      
#                                                                                                              
#########################################################


# Normal
  speech_engine_echo:
    sequence:
      - condition: template
        value_template: "{{ is_state('binary_sensor.quiet_time', 'off') }}"
      - condition: template 
        value_template: "{{ is_state('input_boolean.vacation_mode', 'off') }}"        
      - condition: template 
        value_template: "{{ is_state('input_select.home_mode', 'Home') }}"
      - service: >-
          {% if who in ['ai_1', 'living_room', 'media_player.ai_1'] %}
             notify.alexa_media_ai_1
          {% elif who in ['ai_2', 'hallway', 'media_player.ai_2']  %}
             notify.alexa_media_ai_2
          {% elif who in ['ai_3']  %}
             notify.alexa_media_ai_3  
          {% else %}
             notify.alexa_media_ai_4
          {% endif %}
        data:
          message: >
            {{ message }}
          data:
             type: tts
      # Save your message for recall
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/lastmsg'
          payload: >
            {% if msg_summary == 'recall' %}
              {% set msg_summary = '{{ states("sensor.alexa_last_msg") }}' %}
            {% else %}
              {% if msg_summary %}
                {% set message = msg_summary %}
              {% endif %}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {{- cleanup( message | striptags | truncate(220) ) -}}
            {% endif %}
          retain: true
        # Save time of last message
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/msgtime'
          payload: >
            {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}
          retain: true  
       # Save location   
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/lastloc'
          payload: '{{ who }}'
          retain: true

# Jarvis
  speech_engine:
    sequence:
      - condition: template
        value_template: "{{ is_state('binary_sensor.quiet_time', 'off') }}"
      - condition: template 
        value_template: "{{ is_state('input_boolean.vacation_mode', 'off') }}"        
      - condition: template 
        value_template: "{{ is_state('input_select.home_mode', 'Home') }}"
      
      - service: notify.alexa_media
        data: 
          message: >
            <voice name="{{ voice }}">
            <amazon:auto-breaths>
            <prosody rate="{{ states('sensor.jarvis_voice_speed') }}">
            {{ message }}
            </prosody>
            </amazon:auto-breaths>
            </voice>
          target: >
            {% if who in ['ai_1', 'living_room', 'media_player.ai_1'] %}
               media_player.ai_1      
            {% elif who in ['ai_2', 'hallway', 'media_player.ai_2'] %}
               media_player.ai_2
            {% elif who in ['ai_3', 'media_player.ai_3'] %}
               media_player.ai_3            
            {% else %}
               media_player.ai_4
            {% endif %}
          data:
            type: tts
            
      # Save your message for recall
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/lastmsg'
          payload: >
            {% if msg_summary == 'recall' %}
              {% set msg_summary = '{{ states("sensor.alexa_last_msg") }}' %}
            {% else %}
              {% if msg_summary %}
                {% set message = msg_summary %}
              {% endif %}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {{- cleanup( message | striptags | truncate(220) ) -}}
            {% endif %}
          retain: true
        # Save time of last message
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/msgtime'
          payload: >
            {{ now().strftime("%-I") }}:{{ now().strftime("%M") }} {{ now().strftime("%p") }}
          retain: true  
       # Save location   
      - service: mqtt.publish
        data_template:
          topic: 'house/alerts/alexa/lastloc'
          payload: '{{ who }}'
          retain: true


  # Script for playing the last message.
  # You can call this from a routing on the Google Home or Amazon Echo
  # Or from an automation tiggered by a button.
  play_last_message:
    sequence:
      - service: script.speech_engine
        data: 
            who: '{{ states(''sensor.room_audio'') }}'
            voice: "{{ states('input_select.jarvis_voice') }}"
            message: >
              At {{ states('sensor.alexa_last_msg_time') }} 
              in the {{ states('sensor.alexa_last_location') }} 
              I said. {{ states('sensor.alexa_last_msg') }}
            msg_summary: "recall"



#########################################################
#                                                                                                              
#             Briefings                                                                                 
#                                                                                                              
#########################################################

  morning_wakeup_report:
    sequence:
      - service: script.alexa_alert
        data: 
          who: ai_4
          message: !include ../tpl/speech/morning_wakeup_report.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"

  morning_briefing:
    sequence:
      - service: script.speech_engine
        data: 
          who: ai_4
          message: !include ../tpl/speech/morning_briefing.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"

  daily_briefing:
    sequence:
      - service: script.speech_engine
        data:
          who: ai_4        
          message: !include ../tpl/speech/daily_briefing.yaml      
          voice: "{{ states('input_select.jarvis_voice') }}"

  sundown_briefing:
    sequence:
      - service: script.speech_engine
        data:
          who: "{{ states('sensor.room_presence') }}"
          message: !include ../tpl/speech/sundown_briefing.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"
      - service: script.text_notify
        data_template:
          who: duc
          message: "Sun is almost down. Time to call it a day."

  nightly_briefing:
    sequence:
      - service: script.speech_engine
        data: 
          who: ai_1
          message: !include ../tpl/speech/nightly_briefing.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"

  shion_nightly_briefing:
    sequence:
      - service: script.speech_engine_echo
        data: 
          who: ai_3
          message: !include ../tpl/speech/shion_nightly_briefing.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"

  event_briefing:
    sequence:
      - service: script.speech_engine
        data: 
          who: ai_4
          message: !include ../tpl/speech/event_briefing.yaml
          voice: "{{ states('input_select.jarvis_voice') }}"



#########################################################
#                                                                                                              
#          END OF CONFIGURATION FILE                                                             
#                                                                                                              
#########################################################